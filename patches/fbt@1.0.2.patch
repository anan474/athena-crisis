diff --git a/lib/FbtReactUtil.js b/lib/FbtReactUtil.js
index becb60e893478abf6b5edf1baa176c69b009d33f..6a0b62f647f23a5688fed5c6e5b3df801af379d8 100644
--- a/lib/FbtReactUtil.js
+++ b/lib/FbtReactUtil.js
@@ -16,7 +16,7 @@
  * @noformat
  * @nogrep
  */
-var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol["for"] && Symbol["for"]('react.element') || 0xeac7;
+var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol["for"] && Symbol["for"]('react.transitional.element') || 0xeac7;
 var canDefineProperty = false;
 
 if (process.env.NODE_ENV !== "production") {
diff --git a/lib/substituteTokens.js b/lib/substituteTokens.js
index 144db1d6553417bb9ec67f537c40c0c4cc4f0067..3061f41cf04dce35f5868c14bbfa2bd75cca10eb 100644
--- a/lib/substituteTokens.js
+++ b/lib/substituteTokens.js
@@ -39,17 +39,28 @@ function markAsSafeForReact(object) {
   if (process.env.NODE_ENV !== "production") {
     // If this looks like a ReactElement, mark it as safe to silence any
     // key warnings.
-    // I use a string key to avoid any possible private variable transforms.
-    var storeKey = '_store';
-    var store = object[storeKey];
 
-    if (object.type != null && object.type != '' && typeof object.props === 'object' && store != null && typeof store === 'object' && typeof store.validated === 'boolean') {
-      store.validated = true;
+    // I use a string key to avoid any possible private variable transforms.
+    const storeKey = '_store';
+
+    const store = object[storeKey];
+    if (
+      object.type != null &&
+      object.type != '' &&
+      typeof object.props === 'object' &&
+      store != null &&
+      typeof store === 'object'
+    ) {
+      if (typeof store.validated === 'number') {
+        store.validated = 1;
+      } else if (typeof store.validated === 'boolean') {
+        store.validated = true;
+      }
     }
   }
-
   return object;
 }
+
 /**
  * Does the token substitution fbt() but without the string lookup.
  * Used for in-place substitutions in translation mode.
@@ -66,12 +77,6 @@ function substituteTokens(template, args, errorListener) {
   var objectPieces = [];
   var argNames = [];
   var stringPieces = template.replace(parameterRegexp, function (_match, parameter, punctuation) {
-    if (!hasOwnProperty.call(args, parameter)) {
-      var _errorListener$onMiss;
-
-      errorListener === null || errorListener === void 0 ? void 0 : (_errorListener$onMiss = errorListener.onMissingParameterError) === null || _errorListener$onMiss === void 0 ? void 0 : _errorListener$onMiss.call(errorListener, Object.keys(args), parameter);
-    }
-
     var argument = args[parameter];
 
     if (argument != null && typeof argument === 'object') {
@@ -80,7 +85,7 @@ function substituteTokens(template, args, errorListener) {
 
       return '\x17' + punctuation;
     } else if (argument == null) {
-      return '';
+      return '{' + parameter + '}' + punctuation;
     }
 
     return String(argument) + (0, _IntlPunctuation.dedupeStops)(String(argument), punctuation);
